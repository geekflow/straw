# Straw Agent Configuration
#

# Global tags can be specified here in key="value" format.
[global_tags]

# Configuration for straw agent
[agent]
 ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false




###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.file]]
## Files to write to, "stdout" is a specially handled file.
  # files = ["stdout", "/tmp/metrics.out"]
  files = ["/tmp/metrics.out"]

## Use batch serialization format instead of line based delimiting.  The
## batch format allows for the production of non line based output formats and
## may more effiently encode and write metrics.
# use_batch_format = false

## The file will be rotated after the time interval specified.  When set
## to 0 no time based rotation is performed.
# rotation_interval = "0h"

## The logfile will be rotated when it becomes larger than the specified
## size.  When set to 0 no size based rotation is performed.
# rotation_max_size = "0MB"

## Maximum number of rotated archives to keep, any older logs are deleted.
## If set to -1, no archives are removed.
# rotation_max_archives = 5

## Data format to output.
## Each data format has its own unique set of configuration options, read
## more about them here:
## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
  data_format = "json"


# A plugin that can transmit metrics over HTTP
#[[outputs.http]]
## URL is the address to send metrics to
#  url = "http://127.0.0.1:3001/api/metrics"

## Timeout for HTTP message
# timeout = "5s"

## HTTP method, one of: "POST" or "PUT"
# method = "POST"
#  method = "PUT"

## HTTP Basic Auth credentials
# username = "username"
# password = "pa$$word"

## OAuth2 Client Credentials Grant
# client_id = "clientid"
# client_secret = "secret"
# token_url = "https://indentityprovider/oauth2/v1/token"
# scopes = ["urn:opc:idm:__myscopes__"]

## Optional TLS Config
# tls_ca = "/etc/telegraf/ca.pem"
# tls_cert = "/etc/telegraf/cert.pem"
# tls_key = "/etc/telegraf/key.pem"
## Use TLS but skip chain & host verification
# insecure_skip_verify = false

## Data format to output.
## Each data format has it's own unique set of configuration options, read
## more about them here:
## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_OUTPUT.md
#  data_format = "json"

## HTTP Content-Encoding for write request body, can be set to "gzip" to
## compress body or "identity" to apply no encoding.
# content_encoding = "identity"

## Additional HTTP headers
#[outputs.http.headers]
#   # Should be set manually to "application/json" for json data_format
#   Content-Type = "text/plain; charset=utf-8"
#  Content-Type = "application/json; charset=utf-8"

#[[outputs.influxdb]]
  # ## The full HTTP or UDP URL for your InfluxDB instance.
  #
  # ## Multiple URLs can be specified for a single cluster, only ONE of the
  # ## urls will be written to each interval.
  # urls = ["unix:///var/run/influxdb.sock"]
  # urls = ["udp://127.0.0.1:8089"]
  # urls = ["http://127.0.0.1:8086"]
  # urls = ["http://192.168.99.100:8086"]


###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################


# Read metrics about cpu usage
#[[inputs.cpu]]
## Whether to report per-cpu stats or not
#  percpu = true
## Whether to report total system cpu stats or not
#  totalcpu = true
## If true, collect raw CPU time metrics.
#  collect_cpu_time = false
## If true, compute and report the sum of all non-idle CPU states.
#  report_active = false


# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]


# [[inputs.process]]

# [[inputs.procstat]]
#   exe = "straw"

